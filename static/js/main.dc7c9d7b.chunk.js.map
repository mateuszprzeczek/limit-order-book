{"version":3,"sources":["hooks/useDropdown.js","InputComponent.js","OrderBook/Add.js","Orders/Order.js","Inventory.js","App.js","reportWebVitals.js","index.js"],"names":["useDropdown","defaultState","label","options","useState","state","setState","id","htmlFor","value","onChange","e","target","onBlur","map","option","InputComponent","this","props","type","placeholder","event","React","Component","Add","orders","setOrders","buyers","setBuyers","setId","limitPrice","setLimitPrice","quantity","setQuantity","message","side","SideDropdown","sortOrders","sort","A","B","onClick","preventDefault","stopPropagation","newOrder","active","length","newOrders","sellOrders","filter","el","tmp","updOrder","updSellers","newSeller","newSellers","seller","sQuantity","ordQuantity","max","Math","i","m","buyOrders","updBuyers","newBuyer","newBuyers","buyer","bQuantity","bind","Order","Inventory","orderComponents","order","Fragment","to","App","sellers","setSellers","console","log","className","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc7c9d7b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst useDropdown = (defaultState, label, options) => {\r\n    const [state, setState] = useState(defaultState);\r\n\r\n    const id = `use-dropdown-${label}`;\r\n\r\n    const Dropdown = () => {\r\n        return (\r\n            <label htmlFor={id}>\r\n                {label}\r\n                <select\r\n                    id={id}\r\n                    value={state}\r\n                    onChange={(e) => setState(e.target.value)}\r\n                    onBlur={(e) => setState(e.target.value)}\r\n                >\r\n                    {options.map((option) => {\r\n                        return (\r\n                            <option key={option} value={option}>\r\n                                {option}\r\n                            </option>\r\n                        );\r\n                    })}\r\n                </select>\r\n            </label>\r\n        );\r\n    };\r\n    return [state, Dropdown, setState];\r\n};\r\n\r\nexport default useDropdown;\r\n","import React from \"react\";\r\n\r\nexport class InputComponent extends React.Component {\r\n    render() {\r\n        const { label, state, setState, type = \"text\" } = this.props;\r\n        const id = `component-input-${label}`;\r\n\r\n        return (\r\n            <label htmlFor={id}>\r\n                {label}\r\n                <input\r\n                    id={id}\r\n                    type={type}\r\n                    value={state}\r\n                    placeholder=\"\"\r\n                    onChange={(event) => setState(event.target.value)}\r\n                />\r\n            </label>\r\n        );\r\n    }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport useDropdown from \"../hooks/useDropdown\";\r\nimport { InputComponent } from \"../InputComponent\";\r\n\r\nexport const Add = ({ orders, setOrders, buyers, setBuyers  }) => {\r\n    const [id, setId] = useState(\"\");\r\n    const [limitPrice, setLimitPrice] = useState(\"\");\r\n    const [quantity, setQuantity] = useState(\"\");\r\n    const [active, setActive] = useState(true);\r\n    const [message, setMessage] = useState('OK')\r\n\r\n    const [sellers, setSellers] = useState([]);\r\n\r\n\r\n    const sides = [\"Buy\", \"Sell\", \"Cancel\"];\r\n    const [side, SideDropdown] = useDropdown(\"Buy\", \"Side\", sides);\r\n\r\n    const addOrder = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n            const newOrder = {\r\n                id: id,\r\n                side: side,\r\n                limitPrice: limitPrice,\r\n                quantity: quantity,\r\n                message: message,\r\n                active: true,\r\n            };\r\n\r\n            if (newOrder.side === \"Buy\") {\r\n                if(!orders.length) {\r\n                    const newOrders = [...orders, newOrder];\r\n                    setOrders(newOrders)\r\n                }\r\n                const activeSellers = orders.filter(el => el.active).filter(el => el.limitPrice <= newOrder.limitPrice)\r\n                const sellOrders = activeSellers.filter(el => el.side === \"Sell\")\r\n                \r\n                if(sellOrders.length) {\r\n                    sortOrders(sellOrders)\r\n                    const length = sellOrders.length;\r\n                    let tmp = 0;\r\n                    let updOrder = null;\r\n                    let updSellers = [];\r\n                    let newSeller = null;\r\n                    let newSellers = [];\r\n                    for (let seller of sellOrders) {\r\n                        if(newOrder.quantity === 0) {\r\n                            break;\r\n                        }\r\n                        if(seller.limitPrice <= newOrder.limitPrice) {\r\n                            let sQuantity = seller.quantity;\r\n                            let ordQuantity = newOrder.quantity;\r\n                            const max = Math.max(sQuantity, ordQuantity);\r\n                            for(let i = 0; i <= max; i++) {\r\n                                sQuantity--\r\n                                ordQuantity--\r\n                                if(ordQuantity === 0 || sQuantity === 0) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (sQuantity === 0) {\r\n                                 updSellers = orders.filter(el => el.id !== seller.id)\r\n                                const m = `fully matched with ${seller.id} (${seller.quantity} @ ${seller.limitPrice})`;\r\n                                 newSeller = {\r\n                                    id: seller.id,\r\n                                    side: seller.side,\r\n                                    limitPrice: seller.limitPrice,\r\n                                    quantity: 0,\r\n                                    message: `Fully matched with ${newOrder.id}`,\r\n                                    active: false,   \r\n                                }\r\n                                newOrder.quantity = ordQuantity\r\n                                newOrder.message = ` ${m}`\r\n\r\n                                 newSellers = [...updSellers, newSeller, newOrder];\r\n                                 setOrders(newSellers)\r\n                                \r\n                            }\r\n                            if (ordQuantity === 0) {\r\n                                updSellers = orders.filter(el => el.id !== seller.id)\r\n                                let m = null;\r\n                                if(sQuantity > 0) {\r\n                                    m = `and ${seller.id} (${sQuantity - ordQuantity} @ ${seller.limitPrice})`\r\n                                } else {\r\n                                    m = `and ${seller.id} (${sQuantity} @ ${seller.limitPrice})`\r\n                                }\r\n                                 newSeller = {\r\n                                    id: seller.id,\r\n                                    side: seller.side,\r\n                                    limitPrice: seller.limitPrice,\r\n                                    active: true,\r\n                                    quantity: sQuantity,\r\n                                    message: ''\r\n                                }\r\n                                newOrder.quantity = ordQuantity\r\n                                 updOrder = {\r\n                                    id: newOrder.id,\r\n                                    side: newOrder.side,\r\n                                    limitPrice: newOrder.limitPrice,\r\n                                    quantity: ordQuantity,\r\n                                    message:  ` ${m}`,\r\n                                    active: false\r\n                                }\r\n                                 newSellers = [...updSellers, newSeller, updOrder]\r\n                                setOrders(newSellers)\r\n                            }\r\n                        } else {\r\n                            tmp += 1;\r\n                        }\r\n                    }\r\n                    \r\n                    if(tmp === length) {\r\n                        const newOrders = [...orders, newOrder];\r\n                        setOrders(newOrders);\r\n                    } \r\n                } else {\r\n                    const newOrders = [...orders, newOrder];\r\n                        setOrders(newOrders);\r\n                }\r\n            } \r\n            if (newOrder.side === \"Sell\") {\r\n                if(!orders.length) {\r\n                    const newOrders = [...orders, newOrder];\r\n                    setOrders(newOrders)\r\n                }\r\n                const activeBuyers = orders.filter(el => el.active).filter(el => el.limitPrice >= newOrder.limitPrice)\r\n                const buyOrders = activeBuyers.filter(el => el.side === \"Buy\")\r\n\r\n                if(orders.length) {\r\n                    sortOrders(buyOrders)\r\n                    const length = buyOrders.length;\r\n                    let tmp = 0;\r\n                    let updOrder = null;\r\n                    let updBuyers = [];\r\n                    let newBuyer = null;\r\n                    let newBuyers = [];\r\n                    for (let buyer of buyOrders) {\r\n                        if(newOrder.quantity === 0) {\r\n                            break;\r\n                        }\r\n                        if(buyer.limitPrice >= newOrder.limitPrice) {\r\n                            let bQuantity = buyer.quantity;\r\n                            let ordQuantity = newOrder.quantity;\r\n                            const max = Math.max(bQuantity, ordQuantity);\r\n                            for(let i = 0; i <= max; i++) {\r\n                                bQuantity--\r\n                                ordQuantity--\r\n                                if(ordQuantity === 0 || bQuantity === 0) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (bQuantity === 0) {\r\n                                 updBuyers = orders.filter(el => el.id !== buyer.id)\r\n                                const m = `Partially matched with ${buyer.id} (${buyer.quantity} @ ${buyer.limitPrice})`;\r\n                                 newBuyer = {\r\n                                    id: buyer.id,\r\n                                    side: buyer.side,\r\n                                    limitPrice: buyer.limitPrice,\r\n                                    quantity: 0,\r\n                                    message: `Fully matched with ${newOrder.id}`,\r\n                                    active: false,\r\n                                }\r\n                                newOrder.quantity = ordQuantity;\r\n                                newOrder.message = `${newOrder.message} ${m}`;\r\n\r\n                                const newBuyers = [...updBuyers, newBuyer, newOrder]\r\n                                setOrders(newBuyers)\r\n                            }\r\n                            if (ordQuantity === 0) {\r\n                                 updBuyers = orders.filter(el => el.id !== buyer.id)\r\n                                let m = null;\r\n                                if(bQuantity > 0) {\r\n                                    m = `fully matched witch ${buyer.id} (${newOrder.quantity} @ ${buyer.limitPrice})`\r\n                                } else {\r\n                                    m = `and ${buyer.id} (${bQuantity} @ ${buyer.limitPrice})`\r\n                                }\r\n                                 newBuyer = {\r\n                                    id: buyer.id,\r\n                                    side: buyer.side,\r\n                                    limitPrice: buyer.limitPrice,\r\n                                    quantity: bQuantity,\r\n                                    message: '',\r\n                                    active: true,\r\n                                }\r\n                                 updOrder = {\r\n                                    id: newOrder.id,\r\n                                    side: newOrder.side,\r\n                                    limitPrice: newOrder.limitPrice,\r\n                                    quantity: ordQuantity,\r\n                                    message: ` ${newOrder.message} ${m}`,\r\n                                    active: false,\r\n                                }\r\n                                 newBuyers = [...updBuyers, newBuyer, updOrder]\r\n                                setOrders(newBuyers)\r\n                            }\r\n                        } else {\r\n                            tmp += 1;\r\n                        }\r\n                    }\r\n                    if(tmp === length) {\r\n                        const newOrders = [...orders, newOrder];\r\n                        setOrders(newOrders);\r\n                    }\r\n                } else {\r\n                    const newOrders = [...orders, newOrder];\r\n                        setOrders(newOrders);\r\n                }\r\n            }  \r\n            \r\n    };\r\n\r\n    const addOrderToSide = (order) => {\r\n        if (order.side === \"Buy\") {\r\n            const newBuyers = [...buyers, order]\r\n            setBuyers(newBuyers)\r\n            checkSellers(order)\r\n        }\r\n        if (order.side === \"Sell\") {\r\n            const newSellers = [...sellers, order];\r\n            setSellers(newSellers)\r\n            checkBuyers(order)\r\n        }\r\n        if (order.side === \"Cancel\") {\r\n            cancelOrder(order.id)\r\n        }\r\n    }\r\n\r\n    const checkSellers = (order) => {\r\n        if (sellers.length) {\r\n            const newSellers = sellers.slice();\r\n            const matchingSellers = newSellers.filter(item => parseInt(item.limitPrice) <= parseInt(order.limitPrice));\r\n            sortMatchingSellers(matchingSellers)\r\n            for (let seller of matchingSellers) {\r\n                if (seller.quantity <= order.quantity && seller.active) {\r\n                    const newQuantity = order.quantity - seller.quantity;\r\n                    if(newQuantity < 0) {\r\n                        continue;\r\n                    }\r\n                    const newOrder = {\r\n                        ...order,\r\n                        quantity: newQuantity,\r\n                        active: newQuantity !== 0 ,\r\n                        message: `Fully matched with ${seller.id} ${seller.quantity} @ ${seller.limitPrice} `\r\n                    }\r\n                    const newSeller = {\r\n                        ...seller,\r\n                        quantity: 0,\r\n                        active: false\r\n                    }\r\n                    const newSellers = sellers.filter(item => item.id !== seller.id);\r\n                    const n = [...newSellers, newSeller]\r\n                    setSellers(n);\r\n                    const newBuyers = buyers.filter(item => item.id !== order.id);\r\n                    const b = [...newBuyers, newOrder]\r\n                    setBuyers(b);\r\n                }\r\n\r\n                if (seller.quantity > order.quantity && seller.active) {\r\n                    const newQuantity = seller.quantity - order.quantity;\r\n                    if(newQuantity < 0) {\r\n                        continue;\r\n                    }\r\n                    const newOrder = {\r\n                        ...order,\r\n                        quantity: 0,\r\n                        active: false,\r\n                        message: `Fully matched with ${seller.id} ${seller.quantity} @ ${seller.limitPrice} `\r\n                    }\r\n                    const newSeller = {\r\n                        ...seller,\r\n                        quantity: newQuantity,\r\n                        active: newQuantity !== 0 \r\n                    }\r\n                    const newSellers = sellers.filter(item => item.id !== seller.id);\r\n                    const n = [...newSellers, newSeller]\r\n                    setSellers(n);\r\n                    const newBuyers = buyers.filter(item => item.id !== order.id);\r\n                    const b = [...newBuyers, newOrder]\r\n                    setBuyers(b);\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n    const checkBuyers = (order) => {\r\n        if (buyers.length) {\r\n            const newBuyers = buyers.slice();\r\n            const matchingBuyers = newBuyers.filter(item => parseInt(item.limitPrice) >= parseInt(order.limitPrice));\r\n            sortMatchingSellers(matchingBuyers)\r\n            for (let buyer of matchingBuyers) {\r\n                if (buyer.quantity <= order.quantity && buyer.active) {\r\n                    const newQuantity = order.quantity - buyer.quantity;\r\n                    if(newQuantity < 0) {\r\n                        continue;\r\n                    }\r\n                    const newOrder = {\r\n                        ...order,\r\n                        quantity: newQuantity,\r\n                        message: `Fully matched with ${buyer.id} ${buyer.quantity} @ ${buyer.limitPrice}`,\r\n                        active: newQuantity !== 0 \r\n                    }\r\n                    const newBuyer = {\r\n                        ...buyer,\r\n                        quantity: 0,\r\n                        active: false\r\n                    }\r\n                    const newBuyers = buyers.filter(item => item.id !== buyer.id);\r\n                    const n = [...newBuyers, newBuyer]\r\n                    setBuyers(n);\r\n                    const newSellers = sellers.filter(item => item.id !== order.id);\r\n                    const b = [...newSellers, newOrder]\r\n                    setSellers(b);\r\n                }\r\n\r\n                if (buyer.quantity > order.quantity && buyer.active) {\r\n                    const newQuantity = buyer.quantity - order.quantity;\r\n                    if(newQuantity < 0) {\r\n                        continue;\r\n                    }\r\n                    const newOrder = {\r\n                        ...order,\r\n                        quantity: 0,\r\n                        active: false,\r\n                        message: `Fully matched with ${buyer.id} ${buyer.quantity} @ ${buyer.limitPrice}`\r\n                    }\r\n                    const newBuyer = {\r\n                        ...buyer,\r\n                        quantity: newQuantity,\r\n                        active: newQuantity !== 0 \r\n                    }\r\n                    const newBuyers = buyers.filter(item => item.id !== buyer.id);\r\n                    const n = [...newBuyers, newBuyer]\r\n                    setBuyers(n);\r\n                    const newSellers = sellers.filter(item => item.id !== order.id);\r\n                    const b = [...newSellers, newOrder]\r\n                    setSellers(b);\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n    const sortMatchingSellers = (matchingSellers) => {\r\n        matchingSellers.sort((A, B) => A.quantity - B.quantity);\r\n    }\r\n    const sortOrders = (orders) => {\r\n        orders.sort((A, B) => B.limitPrice - A.limitPrice);\r\n    }\r\n\r\n    const cancelOrder = (id) => {\r\n        const buyer = buyers.filter(item => item.id === id);\r\n        console.log('cancel buyer ', buyer)\r\n        const newBuyers = buyers.filter(item => item.id !== id);\r\n        console.log('cancel  newBuyers',newBuyers)\r\n       if(!buyer.active) {\r\n           const newBuyer = {\r\n               ...buyer,\r\n               message: \"Failed - no such active order\"\r\n           }\r\n            const b = [...newBuyers, newBuyer];\r\n            setBuyers(b)\r\n       } if(buyer.active && buyer.quantity !== 0) {\r\n           const newBuyer = {\r\n               ...buyer,\r\n               active: false,\r\n               message: 'OK'\r\n           }\r\n           const b = [...newBuyers, newBuyer];\r\n           setBuyers(b)\r\n       } if (buyer.quantity === 0) {\r\n        const newBuyer = {\r\n            ...buyer,\r\n            message: 'Failed - already fully filled'\r\n        }\r\n        const b = [...newBuyers, newBuyer];\r\n        setBuyers(b)\r\n       }\r\n\r\n       setSellers(sellers.filter(item => item.id !== id))\r\n    }\r\n\r\n    const changeOrders = (orders, index, q) => {\r\n        const newOrders = orders.slice();\r\n        const order = newOrders[index];\r\n        const newOrder = {\r\n          ...order,\r\n          quantity: q,\r\n        };\r\n        newOrders[index] = newOrder;\r\n          return newOrders;\r\n        };\r\n\r\n    return (\r\n        <div>\r\n            {id}\r\n            <form>\r\n                <InputComponent\r\n                    label=\"id\"\r\n                    state={id}\r\n                    setState={setId}\r\n                />\r\n                <SideDropdown />\r\n                \r\n                <InputComponent\r\n                    label=\"quantity\"\r\n                    state={quantity}\r\n                    setState={setQuantity}\r\n                    type=\"number\"\r\n                />\r\n                <InputComponent\r\n                    label=\"LimitPrice\"\r\n                    state={limitPrice}\r\n                    type=\"number\"\r\n                    setState={setLimitPrice}\r\n                />\r\n\r\n                <br />\r\n                <button onClick={addOrder.bind(this)}>Dodaj</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Order = ({ id, side, limitPrice, quantity, message }) => {\r\n  \r\n    return (\r\n        <div>\r\n           \r\n            <h2> {id} {side} {quantity} @ {limitPrice} {message}</h2>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"@reach/router\";\r\nimport { Order } from \"./Orders/Order\";\r\n\r\nexport const Inventory = ({ orders }) => {\r\n    const orderComponents = orders.map((order) => {\r\n        return (\r\n            <Order\r\n                key={order.id}\r\n                id={order.id}\r\n                side={order.side}\r\n                limitPrice={order.limitPrice}\r\n                quantity={order.quantity}\r\n            />\r\n        );\r\n    });\r\n    return (\r\n        <React.Fragment>\r\n            {orders.length === 0 ? <h3>No Orders</h3> : orderComponents}\r\n            <Link to=\"/\">Menage orders</Link>\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router, Link } from \"@reach/router\";\nimport { Add } from \"./OrderBook/Add\";\nimport { Inventory } from \"./Inventory\";\nimport {Order} from './Orders/Order'\n\nimport './App.css';\n\nfunction App() {\n  const [orders, setOrders] = useState([]);\n  \n  const [buyers, setBuyers] = useState([]);\n  const [sellers, setSellers] = useState([]);\n\n  console.log('orders   ', orders)\n  console.log('sellers   ', sellers)\n  \n\n  const orderComponents = orders.map(order => {\n    return (\n      <div className=\"row\" key={order.id}>\n        <Order\n            id={order.id}\n            side={order.side}\n            limitPrice={order.limitPrice}\n            quantity={order.quantity}\n            message={order.message}\n        />\n        <hr />\n      </div>\n    )\n  })\n  \n\n\n//   const buyerComponents = buyers.map((order) => {\n//     console.log('buyer' ,order)\n//     return (\n//       <div className=\"buyer\" key={order.id}>\n//         <Order\n           \n//             message={order.message}\n//         />\n//         <hr />\n//       </div>\n//     );\n// });\n\n//   const sellersComponent = sellers.map((seller) => {\n//     console.log('seller', seller)\n//     return (\n//       <div className=\"seller\" key={seller.id}>\n//        <Order \n        \n//         message={seller.message}\n//        />\n//      </div>\n//    )\n//   });\n\n  return (\n    <div className=\"App\">\n     <Link to=\"/limit-order-book\">\n                    <h1>Limit Order Book v1</h1>\n                </Link>\n                <Router>\n                    <Add orders={orders} setOrders={setOrders} buyers={buyers} setBuyers={setBuyers} sellers={sellers} setSellers={setSellers} path=\"/limit-order-book\"></Add>\n                    <Inventory orders={orders} path=\"/\" />\n                </Router>\n                {orderComponents}\n                <div className=\"row\">\n                {/* {buyerComponents}\n                {sellersComponent} */}\n\n                </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}